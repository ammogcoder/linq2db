variables:
  solution: 'linq2db.sln'
  build_configuration: 'Azure'
#  netfx45_tests: 'netfx45_tests' # maybe
  netfx46_tests: 'netfx46_tests'
  netcore2_tests: 'netcoreapp20_tests'

stages:

########################################
#  Build and publish testable binaries #
########################################
- stage: Build
  displayName: 'Build: '
  jobs:
  - job:
    pool:
      vmImage: 'windows-2019'
    displayName: 'Build'

    steps:

    - task: MSBuild@1
      inputs:
        solution: '$(solution)'
        configuration: '$(build_configuration)'
        msbuildArguments: '/t:Restore;Rebuild -m'
      displayName: Build Solution

# need it for DotNetCoreCLI task be able to build C#8 project
    - task: DotNetCoreInstaller@1
      inputs:
        version: '3.0.100-preview7-012821'
      displayName: Install .NET Core 3p7 SDK

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '**/Tests/Linq/Tests.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: -f netcoreapp2.0 -c $(build_configuration)
        nobuild: true
      displayName: Publish Test Project

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETFX46

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.0/publish'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETCOREAPP2.0

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        artifactName: '$(netfx46_tests)'
      displayName: Publish test artifacts for NETFX46

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.0/publish'
        artifactName: '$(netcore2_tests)'
      displayName: Publish test artifacts for NETCOREAPP2.0

##############
#  Run tests #
##############

- stage: Tests
  displayName: 'Tests: '
  dependsOn: Build
  condition: succeeded()

  jobs:
########################
#  Windows (NETFX 4.6) #
########################
  - job:
    pool:
      vmImage: 'windows-2019'
    displayName: 'Win / NETFX 4.6 / '

    strategy:
      matrix:
        SQLite_Classic:
           title: 'SQLite.Classic'
#          file: 'win_netfx_job1.ps1'
#        job2:
#          file: 'win_netfx_job2.ps1'

    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(netfx46_tests)'
        downloadPath: '$(System.DefaultWorkingDirectory)'

#    - task: PowerShell@2
#      inputs:
#        filePath: '$(netfx46_tests)/$(file)'
#        workingDirectory: '$(netfx46_tests)'

    - task: VSTest@2
      inputs:
        testAssemblyVer2: |
         **/$(netfx46_tests)/linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFiltercriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.6'
      displayName: '$(title)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'

############################
#  Windows (NETCOREAPP2_0) #
############################
  - job:
    pool:
      vmImage: 'windows-2019'
    displayName: 'Win / NETCOREAPP2.0 / '

    strategy:
      matrix:
        SQLite_MS:
          title: 'SQLite.MS'
#      file: 'win_core2_job1.ps1'

    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(netcore2_tests)'
        downloadPath: '$(System.DefaultWorkingDirectory)'

#    - task: PowerShell@2
#      inputs:
#        filePath: '$(netcore2_tests)/$(file)'
#        workingDirectory: '$(netcore2_tests)'

    - task: VSTest@2
      inputs:
        testAssemblyVer2: |
          **/$(netcore2_tests)/linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFilterCriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETCoreApp,Version=v2.0'
      displayName: '$(title)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'

##########################
#  Linux (NETCOREAPP2_0) #
##########################
  - job:
    pool:
      vmImage: 'ubuntu-16.04'
    displayName: 'Lin / NETCOREAPP2.0 / '

    strategy:
      matrix:
        SQLite_MS:
          title: 'SQLite.MS'
#      file: 'win_core2_job1.ps1'

    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(netcore2_tests)'
        downloadPath: '$(System.DefaultWorkingDirectory)'

#    - task: PowerShell@2
#      inputs:
#        filePath: '$(netcore2_tests)/$(file)'
#        workingDirectory: '$(netcore2_tests)'

    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: './$(netcore2_tests)/linq2db.Tests.dll'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: '/TestCaseFilter:"TestCategory != SkipCI\" /Framework:.NETCoreApp,Version=v2.0'
        nobuild: true
        publishTestResults: false
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
