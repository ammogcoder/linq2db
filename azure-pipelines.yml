variables:
  solution: 'linq2db.sln'
  build_configuration: 'Azure'
  assemblyVersion: 3.0.0
  artifact_nugets: 'nugets'
  artifact_linq2db_binaries: 'linq2db_binaries'
  artifact_linq2db_tools_binaries: 'linq2db_tools_binaries'
#  netfx45_tests: 'netfx45_tests' # maybe
  netfx46_tests: 'netfx46_tests'
  netcore2_tests: 'netcoreapp20_tests'

stages:

########################################
#  Build and publish testable binaries #
########################################
- stage: Build
  displayName: 'Build: '
  jobs:
  - job: build_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Build'

    steps:

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/Build/linq2db.Default.props -version $(assemblyVersion)
      displayName: Update assembly version

    - task: MSBuild@1
      inputs:
        solution: '$(solution)'
        configuration: '$(build_configuration)'
        msbuildArguments: '/t:Restore;Rebuild -m'
      displayName: Build Solution

# need it for DotNetCoreCLI task be able to build C#8 project
    - task: DotNetCoreInstaller@1
      inputs:
        version: '3.0.100-preview7-012821'
      displayName: Install .NET Core 3p7 SDK

    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        projects: '**/Tests/Linq/Tests.csproj'
        publishWebProjects: false
        zipAfterPublish: false
        arguments: -f netcoreapp2.0 -c $(build_configuration)
        nobuild: true
      displayName: Publish Test Project

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETFX46

    - task: CopyFiles@2
      inputs:
        targetFolder: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.0/publish'
        sourceFolder: '$(Build.SourcesDirectory)/Tests'
        contents: 'DataProviders.json'
      displayName: Copy test settings for NETCOREAPP2.0

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'
        artifactName: '$(netfx46_tests)'
      displayName: Publish test artifacts for NETFX46

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/netcoreapp2.0/publish'
        artifactName: '$(netcore2_tests)'
      displayName: Publish test artifacts for NETCOREAPP2.0

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/Source/LinqToDB/bin/Release'
        artifactName: '$(artifact_linq2db_binaries)'
      displayName: Publish linq2db build results

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/Source/LinqToDB.Tools/bin/Release'
        artifactName: '$(artifact_linq2db_tools_binaries)'
      displayName: Publish linq2db build results

#############################
#  Build and Publish nugets #
#############################
  - job: build_nugets_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Build nugets'
    variables:
      nugetVersion: $(assemblyVersion)
    dependsOn: build_job
    condition: succeeded()

    steps:

    - powershell: echo "##vso[task.setvariable variable=nugetVersion]$(nugetVersion)-rc$(Build.BuildNumber)"
      condition: ne(variables['Build.SourceBranch'], 'release')
      displayName: Update nuget version

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(artifact_linq2db_binaries)'
        downloadPath: '$(Build.SourcesDirectory)/Source/LinqToDB/bin/Release'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(artifact_linq2db_Tools_binaries)'
        downloadPath: '$(Build.SourcesDirectory)/Source/LinqToDB.Tools/bin/Release'

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(netfx46_tests)'
        downloadPath: '$(Build.SourcesDirectory)/Tests/Linq/bin/$(build_configuration)/net46'

    - task: PowerShell@2
      inputs:
        filePath: '$(Build.SourcesDirectory)/Build/SetVersion.ps1'
        workingDirectory: '$(Build.SourcesDirectory)'
        arguments: -path $(Build.SourcesDirectory)/NuGet/*.nuspec -version $(nugetVersion)
      displayName: Update nuspecs

    - task: CmdLine@2
      inputs:
        script: echo "$(Build.SourcesDirectory)/NuGet/PackCI.bat"
        workingDirectory: $(Build.SourcesDirectory)/NuGet
      displayName: Build nugets

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)/NuGet/built'
        artifactName: '$(artifact_nugets)'
      displayName: Publish nugets to artifacts

###############################
#  Tests: Windows (NETFX 4.6) #
###############################
  - job: test_win_netfx46_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Win / NETFX 4.6 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'release'))

    strategy:
      matrix:
        SQLite_Classic:
           title: 'SQLite.Classic'
#          file: 'win_netfx_job1.ps1'
#        job2:
#          file: 'win_netfx_job2.ps1'

    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(netfx46_tests)'
        downloadPath: '$(System.DefaultWorkingDirectory)'

#    - task: PowerShell@2
#      inputs:
#        filePath: '$(netfx46_tests)/$(file)'
#        workingDirectory: '$(netfx46_tests)'

    - task: VSTest@2
      inputs:
        testAssemblyVer2: |
         **/$(netfx46_tests)/linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFiltercriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETFramework,Version=v4.6'
      displayName: '$(title)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'

###################################
#  Tests: Windows (NETCOREAPP2_0) #
###################################
  - job: test_win_netcoreapp20_job
    pool:
      vmImage: 'windows-2019'
    displayName: 'Win / NETCOREAPP2.0 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'release'))

    strategy:
      matrix:
        SQLite_MS:
          title: 'SQLite.MS'
#      file: 'win_core2_job1.ps1'

    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(netcore2_tests)'
        downloadPath: '$(System.DefaultWorkingDirectory)'

#    - task: PowerShell@2
#      inputs:
#        filePath: '$(netcore2_tests)/$(file)'
#        workingDirectory: '$(netcore2_tests)'

    - task: VSTest@2
      inputs:
        testAssemblyVer2: |
          **/$(netcore2_tests)/linq2db.Tests.dll
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        testFilterCriteria: 'TestCategory != SkipCI'
        otherConsoleOptions: '/Framework:.NETCoreApp,Version=v2.0'
      displayName: '$(title)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'

#################################
#  Tests: Linux (NETCOREAPP2_0) #
#################################
  - job: test_linux_netcoreapp20_job
    pool:
      vmImage: 'ubuntu-16.04'
    displayName: 'Lin / NETCOREAPP2.0 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'release'))

    strategy:
      matrix:
        SQLite_MS:
          title: 'SQLite.MS'
#      file: 'win_core2_job1.ps1'

    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(netcore2_tests)'
        downloadPath: '$(System.DefaultWorkingDirectory)'

#    - task: PowerShell@2
#      inputs:
#        filePath: '$(netcore2_tests)/$(file)'
#        workingDirectory: '$(netcore2_tests)'

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest ./$(netcore2_tests)/linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v2.0 /logger:trx
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'

#################################
#  Tests: MacOS (NETCOREAPP2_0) #
#################################
  - job: test_macos_netcoreapp20_job
    pool:
      vmImage: 'macOS-10.14'
    displayName: 'Mac / NETCOREAPP2.0 / '
    dependsOn: build_job
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'release'))

    strategy:
      matrix:
        SQLite_MS:
          title: 'SQLite.MS'
#      file: 'win_core2_job1.ps1'

    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: '$(netcore2_tests)'
        downloadPath: '$(System.DefaultWorkingDirectory)'

#    - task: PowerShell@2
#      inputs:
#        filePath: '$(netcore2_tests)/$(file)'
#        workingDirectory: '$(netcore2_tests)'

# just because there is not vstest handing in DotNetCoreCLI@2
# https://github.com/microsoft/azure-pipelines-tasks/blob/master/Tasks/DotNetCoreCLIV2/dotnetcore.ts#L60
    - script: dotnet vstest ./$(netcore2_tests)/linq2db.Tests.dll /TestCaseFilter:"TestCategory != SkipCI" /Framework:.NETCoreApp,Version=v2.0 /logger:trx
      displayName: '$(title)'


    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VsTest
        testResultsFiles: '**/*.trx'
