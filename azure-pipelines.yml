variables:
  solution: 'linq2db.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Azure'

trigger:
  - master

jobs:
- job: Linux
  pool:
    vmImage: 'ubuntu-16.04'

  steps:
  - script: dotnet test ./Tests/Linq/Tests.csproj -c Azure -f netcoreapp2.0 --logger "trx;LogFileName=linux_test_results.trx" --filter "TestCategory != FreeText & TestCategory != Explicit & TestCategory != Ignored & TestCategory != WindowsOnly & TestCategory != ActiveIssue"
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VsTest
      testResultsFiles: '**/linux_test_results.trx'

- job: MacOS
  pool:
    vmImage: 'macOS-10.14'

  steps:
  - script: dotnet test ./Tests/Linq/Tests.csproj -c Azure -f netcoreapp2.0 --logger "trx;LogFileName=macos_test_results.trx" --filter "TestCategory != FreeText & TestCategory != Explicit & TestCategory != Ignored & TestCategory != WindowsOnly & TestCategory != ActiveIssue"
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VsTest
      testResultsFiles: '**/macos_test_results.trx'

- job: Windows_build
  pool:
    vmImage: 'vs2017-win2016'
  displayName: 'Windows (build)'

  steps:
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: '4.4.1'
      checkLatest: true

#- powershell: |
#      $filename1 = "SSCERuntime_x86-ENU.msi"
#      $filename2 = "SSCERuntime_x64-ENU.msi"
#      $downloadUrl = "https://download.microsoft.com/download/6/9/5/695ED23C-F40F-420C-98D1-0F752B8D4E2B/1033/"

#      (New-Object Net.WebClient).DownloadFile($downloadUrl+"/x86/"+$filename1, $filename1)
#      (New-Object Net.WebClient).DownloadFile($downloadUrl+"/x64/"+$filename2, $filename2)

#      $job = Start-Job { msiexec /i $filename1 /qn }
#      Wait-Job $job
#      Receive-Job $job

#      $job = Start-Job { msiexec /i $filename2 /qn }
#      Wait-Job $job
#      Receive-Job $job
#  displayName: 'Install SqlCe 4.0 runtime'

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'
      command: 'restore'

  - task: MSBuild@1
    inputs:
      solution: '$(solution)'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/Tests/Linq'
      artifactName: 'Linq'

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(System.DefaultWorkingDirectory)/Build/'
      artifactName: Build

- job: Windows_testfx
  dependsOn: Windows_build
  condition: succeeded()
  pool:
    vmImage: 'vs2017-win2016'
  displayName: 'Windows (netfx tests job1)'

  steps:
  - checkout: none 

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'Linq'
      downloadPath: '$(System.DefaultWorkingDirectory)/Tests/'

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'Build'
      downloadPath: '$(System.DefaultWorkingDirectory)'

#  - task: DotNetCoreCLI@2
#    inputs:
#      command: test
#      projects: '**/Tests/Linq/Tests.csproj'
#      arguments: '-c Azure --collect "Code coverage" -f net46 --no-build --logger "trx;LogFileName=net46_test_results.trx" --filter "TestCategory != Ignored & TestCategory != ActiveIssue & TestCategory != SkipCI"'

  - script: dotnet test Tests\Linq\ -f netcoreapp2.0 --no-build --logger "trx;LogFileName=net46_test_results.trx" --filter "TestCategory != Ignored & TestCategory != ActiveIssue & TestCategory != SkipCI" -c Azure
    displayName: 'Run tests NET46' 
#--collect "Code coverage"

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: VsTest
      testResultsFiles: '**/*test_results.trx'
